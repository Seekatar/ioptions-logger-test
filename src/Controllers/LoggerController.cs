/*
 * IConfiguration and IOption test
 *
 * Test API to show using IOptions and IConfiguration
 *
 * OpenAPI spec version: 1.0.0-oas3
 * Contact: myemail@bogus.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using IOptionTest.Models;
using IOptionTest.Attributes;
using System.Diagnostics;
using Microsoft.Extensions.Logging.Abstractions;
using System.ComponentModel.DataAnnotations;
using Serilog.Context;

namespace IOptionTest.Controllers
{
    /// <summary>
    ///
    /// </summary>
    [ApiController]
    public partial class LoggerController : ControllerBase
    {
        private ILogger<LoggerController> _logger;
        static string EyeCatcher = "OOOOOOOOOOOOOOOOOOO";

        [LoggerMessage(EventId = 0, Level = LogLevel.Information, Message = "LoggerMessage says {message} for {Id}")]
        partial void LogSomething(string message, int id);

        public LoggerController(ILogger<LoggerController> logger)
        {
            _logger = logger;
        }

        /// <summary>
        /// Log a message
        /// </summary>
        /// <param name="message">Message to log</param>
        /// <response code="200">Ok</response>
        /// <response code="400">bad input parameter</response>
        [HttpPost]
        [Route("/api/logger")]
        [ValidateModelState]
        [SwaggerOperation("LogMessage")]
        public virtual IActionResult LogMessage([FromBody]Message message)
        {
            using var lc = LogContext.PushProperty("ClientId", 1);
            var scope = new Dictionary<string, object>();
            scope.Add("clientId2", 123);
            scope.Add("marketEntityId2", 435);
            using var _loggerScope = _logger.BeginScope(scope);

            Sentry.SentrySdk.ConfigureScope(scope =>
            {
                scope.SetTag("clientId", message.ClientId);
                scope.SetTag("marketEntityId", "888");
            });

            Task.Delay(TimeSpan.FromSeconds(message.DelaySeconds)).Wait();

            _logger.Log(message.Level, "{eyeCatcher} Logging with {level} and message {message}",
                                            EyeCatcher, message.Level, message.Text);
            return Ok();
        }

        /// <summary>
        /// Log messages with LoggerMessage and LogInformation
        /// </summary>
        /// <param name="body">Message to log</param>
        /// <param name="logCount"></param>
        /// <response code="200">Ok</response>
        /// <response code="400">bad input parameter</response>
        [HttpPost]
        [Route("/api/logger/{logCount:int}")]
        [ValidateModelState]
        [SwaggerOperation("LogMessageCount")]
        [SwaggerResponse(statusCode: 200, type: typeof(Timings), description: "Ok")]
        public virtual ActionResult<Timings> LogMessageCount([FromBody] Message message, [FromRoute][Required] int logCount,
        [FromQuery] bool useNullLogger = true)
        {
            if (useNullLogger)
            {
                _logger = NullLogger<LoggerController>.Instance;
            }

            var sw = Stopwatch.StartNew();
            for (int i = 0; i < logCount; i++)
                _logger.LogInformation("_logger.Log says {Message} for {i}", message.Text, i);
            sw.Stop();

            var timing = new Timings { LoggerCallMs = sw.ElapsedMilliseconds };
            sw.Restart();
            for (int i = 0; i < logCount; i++)
                LogSomething(message.Text, i);
            sw.Stop();
            timing.LoggerMessageMs = sw.ElapsedMilliseconds;
            return Ok(timing);
        }
    }
}
