/*
 * IConfiguration and IOption test
 *
 * Test API to show using IOptions and IConfiguration
 *
 * OpenAPI spec version: 1.0.0-oas3
 * Contact: myemail@aisreview.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using System.ComponentModel.DataAnnotations;
using IO.Swagger.Attributes;

using Microsoft.AspNetCore.Authorization;
using IOptionTest;
using System.Threading.Tasks;
using OptionsLoggerTest.Interfaces;
using OptionLoggerTest;
using Microsoft.Extensions.Options;

namespace IOptionTest.Controllers;

public class ClientContext
{
    public string ClientId { get; set; } = "";
    public int MarketEntityId { get; set; }
}


public class ScopeControllerBase : ControllerBase
{
    private readonly ILogger _logger;

    protected ILogger Logger => _logger;

    protected ScopeControllerBase(ILogger logger)
    {
        _logger = logger;
    }

#pragma warning disable CS8603 // Possible null return value.
    protected T ExecuteIt<T>(Func<T> a, IDictionary<string, object> context)
    {
        try
        {
            using var scope = _logger.BeginScope(context);
            return a();
        }
        catch (Exception ex) when (LogCaughtException(ex))
        {
            // never get here since LogException returns false
        }
        // or here
        return default(T);
    }
    protected async Task<T> ExecuteItAsync<T>(Func<Task<T>> a, IDictionary<string, object> context)
    {
        try
        {
            using var scope = _logger.BeginScope(context);
            return await a();
        }
        catch (Exception ex) when (LogCaughtException(ex))
        {
            // never get here since LogException returns false
        }
        // or here
        return default(T);

    }
#pragma warning restore CS8603 // Possible null return value.

    protected virtual void LogException(Exception ex)
    {
        _logger.LogError(ex, "Error");

    }
    protected virtual bool LogCaughtException(Exception ex)
    {
        LogException(ex);
        return false;
    }
}

public class ClientContextScopeControllerBase : ScopeControllerBase
{
    protected ClientContextScopeControllerBase(ILogger logger) : base(logger)
    {
    }

    protected T ExecuteIt<T>(ClientContext context, Func<T> a)
    {
        var contextDict = new Dictionary<string, object>
        {
            { "ClientId", context.ClientId },
            { "MarketEntityId", context.MarketEntityId }
        };
        return ExecuteIt(a, contextDict);
    }
    protected async Task<T> ExecuteItAsync<T>(ClientContext context, Func<Task<T>> a)
    {
        var contextDict = new Dictionary<string, object>
        {
            { "ClientId", context.ClientId },
            { "MarketEntityId", context.MarketEntityId }
        };
        return await ExecuteItAsync(a, contextDict);
    }
}

/// <summary>
///
/// </summary>
[ApiController]
public class OptionsApiController : ClientContextScopeControllerBase
{
    private readonly IOptionsService _optionsService;
    private readonly IOptionsSnapshot<SnapshotOptions> _snapshot;
    ClientContext GetContext() => new ClientContext { ClientId = "ZZZZZZZZZZZZZZZZZZZZZZ", MarketEntityId = 1111 };
    public OptionsApiController(IOptionsService optionsService, IOptionsSnapshot<SnapshotOptions> snapshot, ILogger<OptionsApiController> logger) : base(logger)
    {
        _optionsService = optionsService;
        _snapshot = snapshot;
    }

    /// <summary>
    /// Get IOptions values using monitor
    /// </summary>
    /// <response code="200">Ok</response>
    /// <response code="400">bad input parameter</response>
    [HttpGet]
    [Route("/api/options/monitored")]
    [ValidateModelState]
    [SwaggerOperation("GetIMonitoredOptions")]
    [SwaggerResponse(statusCode: 200, type: typeof(Configuration), description: "Ok")]
    public virtual async Task<ActionResult<MonitoredOptions>> GetIMonitoredOptions()
    {
        return await ExecuteItAsync(GetContext(), async () =>
        {
            return Ok(await _optionsService.GetMonitoredOptions());
        });
    }

    /// <summary>
    /// Get IOptions values
    /// </summary>
    /// <response code="200">Ok</response>
    /// <response code="400">bad input parameter</response>
    [HttpGet]
    [Route("/api/options")]
    [ValidateModelState]
    [SwaggerOperation("GetIOptions")]
    [SwaggerResponse(statusCode: 200, type: typeof(Configuration), description: "Ok")]
    public virtual async Task<ActionResult<OneTimeOptions>> GetIOptions()
    {
        return await ExecuteItAsync(GetContext(), async () =>
        {
            return Ok(await _optionsService.GetOneTimeOptions());
        });
    }

    /// <summary>
    /// Get IOptions values using snapshot
    /// </summary>
    /// <response code="200">Ok</response>
    /// <response code="400">bad input parameter</response>
    [HttpGet]
    [Route("/api/options/snapshot")]
    [ValidateModelState]
    [SwaggerOperation("GetISnapshotOptions")]
    [SwaggerResponse(statusCode: 200, type: typeof(Configuration), description: "Ok")]
    public virtual ActionResult<SnapshotOptions> GetISnapshotOptions()
    {
        return ExecuteIt(GetContext(), () =>
        {
            Logger.LogInformation("Getting value {value}", _snapshot.Value);
            return Ok(_snapshot.Value);
        });
    }
    /// <summary>
    /// Get IOptions values using snapshot
    /// </summary>
    /// <response code="200">Ok</response>
    /// <response code="400">bad input parameter</response>
    [HttpGet]
    [Route("/api/options/throw")]
    [ValidateModelState]
    [SwaggerOperation("GetISnapshotOptionsThrow")]
    [SwaggerResponse(statusCode: 200, type: typeof(Configuration), description: "Ok")]
    public virtual ActionResult<SnapshotOptions> GetISnapshotOptionsThrow()
    {
        return ExecuteIt(GetContext(), () =>
        {
            Logger.LogInformation("Getting value {value}", _snapshot.Value);
            throw new NotImplementedException("This is a test");
#pragma warning disable CS0162
            return Ok(_snapshot.Value);
#pragma warning restore CS0162
        });
    }
}

