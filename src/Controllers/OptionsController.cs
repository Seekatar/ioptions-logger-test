/*
 * IConfiguration and IOption test
 *
 * Test API to show using IOptions and IConfiguration
 *
 * OpenAPI spec version: 1.0.0-oas3
 * Contact: myemail@bogus.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using Microsoft.Extensions.Options;
using IOptionTest.Models;
using IOptionTest.Options;
using IOptionTest.Logging;
using IOptionTest.Interfaces;
using IOptionTest.Attributes;

namespace IOptionTest.Controllers;

/// <summary>
///
/// </summary>
[ApiController]
public class OptionsApiController : ObjectScopeControllerBase<TestContext>
{
    private readonly IOptionsService _optionsService;
    private readonly IOptionsSnapshot<SnapshotOptions> _snapshot;

    // In a real app this would be more interesting
    TestContext GetContext() => new () { ClientId = "ZZZZZZZZZZZZZZZZZZZZZZ", MarketEntityId = 1111 };

    public OptionsApiController(IOptionsService optionsService, IOptionsSnapshot<SnapshotOptions> snapshot, ILogger<OptionsApiController> logger) : base(logger, TestContext.ToDictionary)
    {
        _optionsService = optionsService;
        _snapshot = snapshot;
    }

    /// <summary>
    /// Get IOptions values using monitor
    /// </summary>
    /// <response code="200">Ok</response>
    /// <response code="400">bad input parameter</response>
    [HttpGet]
    [Route("/api/options/monitored")]
    [ValidateModelState]
    [SwaggerOperation("GetIMonitoredOptions")]
    [SwaggerResponse(statusCode: 200, type: typeof(Configuration), description: "Ok")]
    public virtual async Task<ActionResult<MonitoredOptions>> GetIMonitoredOptions()
    {
        return await Logger.InvokeAsync(GetContext(), async () =>
        {
            return Ok(await _optionsService.GetMonitoredOptions());
        });
    }

    /// <summary>
    /// Get IOptions values
    /// </summary>
    /// <response code="200">Ok</response>
    /// <response code="400">bad input parameter</response>
    [HttpGet]
    [Route("/api/options")]
    [ValidateModelState]
    [SwaggerOperation("GetIOptions")]
    [SwaggerResponse(statusCode: 200, type: typeof(Configuration), description: "Ok")]
    public virtual async Task<ActionResult<OneTimeOptions>> GetIOptions()
    {
        return await Logger.InvokeAsync(GetContext(), async () =>
        {
            return Ok(await _optionsService.GetOneTimeOptions());
        });
    }

    /// <summary>
    /// Get IOptions values using snapshot
    /// </summary>
    /// <response code="200">Ok</response>
    /// <response code="400">bad input parameter</response>
    [HttpGet]
    [Route("/api/options/snapshot")]
    [ValidateModelState]
    [SwaggerOperation("GetISnapshotOptions")]
    [SwaggerResponse(statusCode: 200, type: typeof(Configuration), description: "Ok")]
    public virtual ActionResult<SnapshotOptions> GetISnapshotOptions()
    {
        return Logger.Invoke(GetContext(), () =>
        {
            Logger.LogInformation("Getting value {value}", _snapshot.Value.Name);
            return Ok(_snapshot.Value);
        });
    }
}

