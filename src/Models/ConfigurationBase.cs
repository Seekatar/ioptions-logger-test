#pragma warning disable CA1834 // Consider using 'StringBuilder.Append(char)' when applicable
// ReSharper disable RedundantUsingDirective
// ReSharper disable CheckNamespace
#nullable disable
/*
 * IConfiguration and IOption test
 *
 * Test API to show using IOptions and IConfiguration
 *
 * OpenAPI spec version: 1.0.0-oas3
 * Contact: myemail@aisreview.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text.Json;

namespace IOptionTest
{ 
    /// <summary>
    /// Values from configuration
    /// </summary>
    [DataContract]
    public partial class ConfigurationBase : IEquatable<ConfigurationBase>
    { 
        /// <summary>
        /// Gets or Sets FromEnvironment
        /// </summary>

        [DataMember(Name="fromEnvironment")]
        public string FromEnvironment { get; set; }

        /// <summary>
        /// Gets or Sets FromAppSettings
        /// </summary>

        [DataMember(Name="fromAppSettings")]
        public string FromAppSettings { get; set; }

        /// <summary>
        /// Gets or Sets FromDevelopmentSettings
        /// </summary>

        [DataMember(Name="fromDevelopmentSettings")]
        public string FromDevelopmentSettings { get; set; }

        /// <summary>
        /// Gets or Sets FromSharedDevelopmentSettings
        /// </summary>

        [DataMember(Name="fromSharedDevelopmentSettings")]
        public string FromSharedDevelopmentSettings { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ConfigurationBase {\n");
            sb.Append("  FromEnvironment: ").Append(FromEnvironment).Append("\n");
            sb.Append("  FromAppSettings: ").Append(FromAppSettings).Append("\n");
            sb.Append("  FromDevelopmentSettings: ").Append(FromDevelopmentSettings).Append("\n");
            sb.Append("  FromSharedDevelopmentSettings: ").Append(FromSharedDevelopmentSettings).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonSerializer.Serialize(this, new JsonSerializerOptions() { WriteIndented = true });
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ConfigurationBase)obj);
        }

        /// <summary>
        /// Returns true if ConfigurationBase instances are equal
        /// </summary>
        /// <param name="other">Instance of ConfigurationBase to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ConfigurationBase other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    FromEnvironment == other.FromEnvironment ||
                    FromEnvironment != null &&
                    FromEnvironment.Equals(other.FromEnvironment)
                ) && 
                (
                    FromAppSettings == other.FromAppSettings ||
                    FromAppSettings != null &&
                    FromAppSettings.Equals(other.FromAppSettings)
                ) && 
                (
                    FromDevelopmentSettings == other.FromDevelopmentSettings ||
                    FromDevelopmentSettings != null &&
                    FromDevelopmentSettings.Equals(other.FromDevelopmentSettings)
                ) && 
                (
                    FromSharedDevelopmentSettings == other.FromSharedDevelopmentSettings ||
                    FromSharedDevelopmentSettings != null &&
                    FromSharedDevelopmentSettings.Equals(other.FromSharedDevelopmentSettings)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (FromEnvironment != null)
                    hashCode = hashCode * 59 + FromEnvironment.GetHashCode();
                    if (FromAppSettings != null)
                    hashCode = hashCode * 59 + FromAppSettings.GetHashCode();
                    if (FromDevelopmentSettings != null)
                    hashCode = hashCode * 59 + FromDevelopmentSettings.GetHashCode();
                    if (FromSharedDevelopmentSettings != null)
                    hashCode = hashCode * 59 + FromSharedDevelopmentSettings.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(ConfigurationBase left, ConfigurationBase right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ConfigurationBase left, ConfigurationBase right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}

#pragma warning restore CA1834 // Consider using 'StringBuilder.Append(char)' when applicable
