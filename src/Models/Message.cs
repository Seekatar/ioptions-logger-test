#pragma warning disable CA1834 // Consider using 'StringBuilder.Append(char)' when applicable
#pragma warning disable CA1307 // Specify StringComparison
// ReSharper disable RedundantUsingDirective
// ReSharper disable CheckNamespace
#nullable disable
/*
 * IConfiguration and IOption test
 *
 * Test API to show using IOptions and IConfiguration
 *
 * OpenAPI spec version: 1.0.0-oas3
 * Contact: myemail@bogus.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text.Json;

namespace IOptionTest.Models
{
    /// <summary>
    /// Message to send
    /// </summary>
    [DataContract]
    public partial class Message : IEquatable<Message>
    {
        /// <summary>
        /// Gets or Sets Text
        /// </summary>
        [Required]

        [DataMember(Name = "message")]
        public string Text { get; set; }

        /// <summary>
        /// Gets or Sets Level
        /// </summary>
        [Required]

        [DataMember(Name="level")]
        public LogLevel Level { get; set; }

        /// <summary>
        /// Gets or Sets DelaySeconds
        /// </summary>

        [DataMember(Name="delaySeconds")]
        public int DelaySeconds { get; set; }

        /// <summary>
        /// Gets or Sets ClientId
        /// </summary>

        [DataMember(Name="clientId")]
        public string ClientId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Message {\n");
            sb.Append("  Text: ").Append(Text).Append("\n");
            sb.Append("  Level: ").Append(Level).Append("\n");
            sb.Append("  DelaySeconds: ").Append(DelaySeconds).Append("\n");
            sb.Append("  ClientId: ").Append(ClientId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonSerializer.Serialize(this, new JsonSerializerOptions() { WriteIndented = true });
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((Message)obj);
        }

        /// <summary>
        /// Returns true if Message instances are equal
        /// </summary>
        /// <param name="other">Instance of Message to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Message other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return
                (
                    Text == other.Text ||
                    Text != null &&
                    Text.Equals(other.Text)
                ) &&
                (
                    Level == other.Level ||
                   Level.Equals(other.Level)
                ) &&
                (
                    DelaySeconds == other.DelaySeconds ||
                    DelaySeconds.Equals(other.DelaySeconds)
                ) &&
                (
                    ClientId == other.ClientId ||
                    ClientId != null &&
                    ClientId.Equals(other.ClientId)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                if (Text != null)
                    hashCode = hashCode * 59 + Text.GetHashCode();

                hashCode = hashCode * 59 + Level.GetHashCode();
                    hashCode = hashCode * 59 + DelaySeconds.GetHashCode();
                    if (ClientId != null)
                    hashCode = hashCode * 59 + ClientId.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
#pragma warning disable 1591

        public static bool operator ==(Message left, Message right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(Message left, Message right)
        {
            return !Equals(left, right);
        }

#pragma warning restore 1591
        #endregion Operators
    }
}

#pragma warning restore CA1834 // Consider using 'StringBuilder.Append(char)' when applicable
#pragma warning disable CA1307 // Specify StringComparison
