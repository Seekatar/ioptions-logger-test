#pragma warning disable CA1834 // Consider using 'StringBuilder.Append(char)' when applicable
// ReSharper disable RedundantUsingDirective
// ReSharper disable CheckNamespace
#nullable disable
/*
 * IConfiguration and IOption test
 *
 * Test API to show using IOptions and IConfiguration
 *
 * OpenAPI spec version: 1.0.0-oas3
 * Contact: myemail@bogus.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text.Json;

namespace IOptionTest
{ 
    /// <summary>
    /// Log timings
    /// </summary>
    [DataContract]
    public partial class Timings : IEquatable<Timings>
    { 
        /// <summary>
        /// Ms to call logger.Information
        /// </summary>
        /// <value>Ms to call logger.Information</value>
        [Required]

        [DataMember(Name="logMs")]
        public long LogMs { get; set; }

        /// <summary>
        /// Ms to call logger message fn
        /// </summary>
        /// <value>Ms to call logger message fn</value>
        [Required]

        [DataMember(Name="loggerMs")]
        public long LoggerMs { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Timings {\n");
            sb.Append("  LogMs: ").Append(LogMs).Append("\n");
            sb.Append("  LoggerMs: ").Append(LoggerMs).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonSerializer.Serialize(this, new JsonSerializerOptions() { WriteIndented = true });
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((Timings)obj);
        }

        /// <summary>
        /// Returns true if Timings instances are equal
        /// </summary>
        /// <param name="other">Instance of Timings to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Timings other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    LogMs == other.LogMs ||
                   LogMs.Equals(other.LogMs)
                ) && 
                (
                    LoggerMs == other.LoggerMs ||
                   LoggerMs.Equals(other.LoggerMs)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    
                    hashCode = hashCode * 59 + LogMs.GetHashCode();
                    
                    hashCode = hashCode * 59 + LoggerMs.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(Timings left, Timings right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(Timings left, Timings right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}

#pragma warning restore CA1834 // Consider using 'StringBuilder.Append(char)' when applicable
